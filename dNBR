//######################################################################################################## 
//#                                                                                                    #\\
//#                                Landsat Normalized Burn Ratio                                       #\\
//#                                                                                                    #\\
//########################################################################################################



// date: 2021-jan-25
// author: Pere Joan Gelabert Vadillo | perejoan.gelabert@udl.cat
// adapted from:  https://www.un-spider.org/advisory-support/recommended-practices/recommended-practice-burn-severity/burn-severity-earth-engine      

Map.setOptions('HYBRID'); //set satellite imagery background
var clip = (function(img) { return img.clip(geometry); }); //Function definition to clip imabe by perimeter

// Parameters to be fixed 
var ID = "2019430119"; //Fire code specification to search it in database
var img_pre=0; // Image selection to carry out dNBR (PREFIRE)
var img_post=0; // Image selection to carry out dNBR (POSTFIRE)


var geometry = perimeters.filter(ee.Filter.eq('CODI_FINAL', ID)); // Retrieve perimeter geometry
var date= ee.Date(geometry.first().get('DATA_INCEN')) // Retrieve date 

print("FIRE CODE:", ID)

print("BURN DATE:",date)

Map.addLayer(geometry,{},"Fire Perimeter") // Display fire perimeter

var platform = (geometry.first().get('Sensor')).getInfo() // Retrieve Sensor parameter


var prefire_end = date.advance(-1,"day"); //end date range search pre fire
var prefire_start = prefire_end.advance(-14*5,"day"); //start date range search pre fire   

var postfire_start = date.advance(1,"day"); //end date range search pre fire
var postfire_end = postfire_start.advance(14*5,"day"); //start date range search pre fire   


// Conditional statement to select Image collection and visualization parameters
if (platform == 'L5' | platform == 'l5') {
  var ImCol = 'LANDSAT/LT05/C01/T1_SR';
  var pl = 'Landsat 5';
  var imageVisParam = {"opacity":1,"bands":["B5","B4","B3"],"min":300,"max":2800,"gamma":1};
  
} else if(platform == 'L7' | platform == 'l7') {
  var ImCol = 'LANDSAT/LE07/C01/T1_SR';
  var pl = 'Landsat 7';
  var imageVisParam = {"opacity":1,"bands":["B5","B4","B3"],"min":300,"max":2800,"gamma":1};
  
  
} else {
  var ImCol = 'LANDSAT/LC08/C01/T1_SR';
  var pl = 'Landsat 8';
  var imageVisParam = {"opacity":1,"bands":["B6","B5","B4"],"min":300,"max":2800,"gamma":1};
  
}



print(ee.String('Data selected for analysis: ').cat(pl));


var area = ee.FeatureCollection(geometry);
Map.centerObject(area);

//----------------------- Select Landsat imagery by time and location -----------------------

var imagery = ee.ImageCollection(ImCol);

// Select all images that overlap with the study area from a given time frame  (Prefire)
var prefireImCol = ee.ImageCollection(imagery
    // Filter by dates.
    .filterDate(prefire_start, prefire_end)
    // Filter by location.
    .filterBounds(area))
    // apply function clip previusly defined
    .map(clip)
    // sort by date
    .sort("system:time_start",false)
    



var count_pre = prefireImCol.size(); 
var imageSetCollection_pre = prefireImCol.toList(count_pre)

print("Pre-fire Image Collection",imageSetCollection_pre)

ee.List.sequence(0,ee.Number(count_pre.subtract(1))).getInfo()
.map(function(img){
  var image = ee.Image(imageSetCollection_pre.get(img))
  Map.addLayer(image, imageVisParam,"img_pre_"+img,false)
})


    
    
// Select all images that overlap with the study area from a given time frame  (Postfire)

var postfireImCol = ee.ImageCollection(imagery
    // Filter by dates.
    .filterDate(postfire_start, postfire_end)
    // Filter by location.
    .filterBounds(area))
    // apply function clip previusly defined
    .map(clip)
    // sort by date
    .sort("system:time_start",true)
    

var count_post = postfireImCol.size(); 
var imageSetCollection_post = postfireImCol.toList(count_post)
print("Post-fire Image Collection",imageSetCollection_post)
ee.List.sequence(0,ee.Number(count_post.subtract(1))).getInfo()
.map(function(img){
  var image = ee.Image(imageSetCollection_post.get(img))
  Map.addLayer(image, imageVisParam,"img_post_"+img,false)
})


var image_pre = ee.Image(imageSetCollection_pre.get(img_pre))
print(image_pre)
var image_post = ee.Image(imageSetCollection_post.get(img_post))
print(image_post)

// Apply platform-specific NBR = (NIR-SWIR2) / (NIR+SWIR2)
if (platform == 'L8' | platform == 'l8') {
  var preNBR = image_pre.normalizedDifference(['B5', 'B7']);
  var postNBR = image_post.normalizedDifference(['B5', 'B7']);
} else {
  var preNBR = image_pre.normalizedDifference(['B4', 'B7']);
  var postNBR = image_post.normalizedDifference(['B4', 'B7']);
}



//------------------ Calculate difference between pre- and post-fire images ----------------

// The result is called delta NBR or dNBR
var dNBR_unscaled = preNBR.subtract(postNBR);

// Scale product to USGS standards
var dNBR = dNBR_unscaled.multiply(1000);

//--------------------------- Burn Ratio Product - Greyscale -------------------------------

var grey = ['white', 'black'];

Map.addLayer(dNBR, {min: -1000, max: 1000, palette: grey}, 'dNBR greyscale',false);

//------------------------- Burn Ratio Product - Classification ----------------------------

// Define an SLD style of discrete intervals to apply to the image.
var sld_intervals =
  '<RasterSymbolizer>' +
    '<ColorMap type="intervals" extended="false" >' +
      '<ColorMapEntry color="#ffffff" quantity="-500" label="-500"/>' +
      '<ColorMapEntry color="#7a8737" quantity="-250" label="-250" />' +
      '<ColorMapEntry color="#acbe4d" quantity="-100" label="-100" />' +
      '<ColorMapEntry color="#0ae042" quantity="100" label="100" />' +
      '<ColorMapEntry color="#fff70b" quantity="270" label="270" />' +
      '<ColorMapEntry color="#ffaf38" quantity="440" label="440" />' +
      '<ColorMapEntry color="#ff641b" quantity="660" label="660" />' +
      '<ColorMapEntry color="#a41fd6" quantity="2000" label="2000" />' +
    '</ColorMap>' +
  '</RasterSymbolizer>';

// Add the image to the map using both the color ramp and interval schemes.
Map.addLayer(dNBR.sldStyle(sld_intervals), {}, 'dNBR classified');

// Seperate result into 8 burn severity classes
var thresholds = ee.Image([-1000, -251, -101, 99, 269, 439, 659, 2000]);
var classified = dNBR.lt(thresholds).reduce('sum').toInt();

//==========================================================================================
//                              ADD BURNED AREA STATISTICS

// count number of pixels in entire layer
var allpix =  classified.updateMask(classified);  // mask the entire layer
var pixstats = allpix.reduceRegion({
  reducer: ee.Reducer.count(),               // count pixels in a single class
  geometry: area,
  scale: 30
  });
var allpixels = ee.Number(pixstats.get('sum')); // extract pixel count as a number


// create an empty list to store area values in
var arealist = [];

// create a function to derive extent of one burn severity class
// arguments are class number and class name
var areacount = function(cnr, name) {
 var singleMask =  classified.updateMask(classified.eq(cnr));  // mask a single class
 var stats = singleMask.reduceRegion({
  reducer: ee.Reducer.count(),               // count pixels in a single class
  geometry: area,
  scale: 30
  });
var pix =  ee.Number(stats.get('sum'));
var hect = pix.multiply(900).divide(10000);                // Landsat pixel = 30m x 30m --> 900 sqm
var perc = pix.divide(allpixels).multiply(10000).round().divide(100);   // get area percent by class and round to 2 decimals
arealist.push({Class: name, Pixels: pix, Hectares: hect, Percentage: perc});
};

// severity classes in different order
var names2 = ['NA', 'High Severity', 'Moderate-high Severity',
'Moderate-low Severity', 'Low Severity','Unburned', 'Enhanced Regrowth, Low', 'Enhanced Regrowth, High'];

// execute function for each class
for (var i = 0; i < 8; i++) {
  areacount(i, names2[i]);
  }

print('Burned Area by Severity Class', arealist, '--> click list objects for individual classes');

//==========================================================================================
//                                    ADD A LEGEND

// set position of panel
var legend = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '8px 15px'
  }});
 
// Create legend title
var legendTitle = ui.Label({
  value: 'dNBR Classes',
  style: {fontWeight: 'bold',
    fontSize: '18px',
    margin: '0 0 4px 0',
    padding: '0'
    }});
 
// Add the title to the panel
legend.add(legendTitle);
 
// Creates and styles 1 row of the legend.
var makeRow = function(color, name) {
 
      // Create the label that is actually the colored box.
      var colorBox = ui.Label({
        style: {
          backgroundColor: '#' + color,
          // Use padding to give the box height and width.
          padding: '8px',
          margin: '0 0 4px 0'
        }});
 
      // Create the label filled with the description text.
      var description = ui.Label({
        value: name,
        style: {margin: '0 0 4px 6px'}
      });
 
      // return the panel
      return ui.Panel({
        widgets: [colorBox, description],
        layout: ui.Panel.Layout.Flow('horizontal')
      })};
 
//  Palette with the colors
var palette =['7a8737', 'acbe4d', '0ae042', 'fff70b', 'ffaf38', 'ff641b', 'a41fd6', 'ffffff'];
 
// name of the legend
var names = ['Enhanced Regrowth, High','Enhanced Regrowth, Low','Unburned', 'Low Severity',
'Moderate-low Severity', 'Moderate-high Severity', 'High Severity', 'NA'];
 
// Add color and and names
for (var i = 0; i < 8; i++) {
  legend.add(makeRow(palette[i], names[i]));
  }  
 
// add legend to map (alternatively you can also print the legend to the console)
Map.add(legend);


//==========================================================================================
//                                  PREPARE FILE EXPORT


var id_pre = image_pre.id().getInfo()
var id_post = image_post.id().getInfo()

      
Export.image.toDrive({image: dNBR, scale: 30, description: 'dNBR_'+ID, 
fileNamePrefix: 'dNBR_'+ID+"_pre_"+id_pre+"_post_"+id_post,
  region: area, maxPixels: 1e10});
